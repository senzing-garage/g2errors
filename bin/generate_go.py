#! /usr/bin/env python3

"""
Used to generate main.go
"""

import json
import logging
import os
from datetime import datetime, timezone

IS_DEBUG = False
FINAL_RESULT = {}

INPUT_FILE = "g2errors.json"
OUTPUT_FILE = "go/main.go"

# -----------------------------------------------------------------------------
# --- Helpers
# -----------------------------------------------------------------------------


def canonical_json(json_string):
    """Create compact JSON.  No spaces."""
    json_object = json.loads(json_string)
    result = json.dumps(json_object, sort_keys=True, separators=(",", ":"))
    return result


# -----------------------------------------------------------------------------
# --- Main
# -----------------------------------------------------------------------------

# Set up logging.

logging.basicConfig(format="%(asctime)s %(message)s", level=logging.INFO)

logging.info("{0}".format("-" * 80))
logging.info("--- {0} - Begin".format(os.path.basename(__file__)))
logging.info("{0}".format("-" * 80))

# Create multi-line strings for output.

OUTPUT_HEADER = "// DO NOT EDIT.  This code is generated.\n"
OUTPUT_HEADER += "// Generated by: g2errors/bin/generate_go.py\n"
OUTPUT_HEADER += f"// Generated date: {datetime.now(timezone.utc).isoformat()}\n"


# noqa: E101
OUTPUT_HEADER += """
package g2error

// ----------------------------------------------------------------------------
// Types
// ----------------------------------------------------------------------------

type G2ErrorTypeIds int

// ----------------------------------------------------------------------------
// "Category" errors
// One of these errors must be the last in each G2ErrorTypes value list.
// ----------------------------------------------------------------------------

type G2BadInputError struct {
	error
	G2ErrorTypeIds []G2ErrorTypeIds
}
type G2BaseError struct {
	error
	G2ErrorTypeIds []G2ErrorTypeIds
}
type G2ConfigurationError struct {
	error
	G2ErrorTypeIds []G2ErrorTypeIds
}
type G2RetryableError struct {
	error
	G2ErrorTypeIds []G2ErrorTypeIds
}
type G2UnrecoverableError struct {
	error
	G2ErrorTypeIds []G2ErrorTypeIds
}

// ----------------------------------------------------------------------------
// Detail errors
// ----------------------------------------------------------------------------

type G2DatabaseConnectionLostError struct{ error }
type G2DatabaseError struct{ error }
type G2LicenseError struct{ error }
type G2NotFoundError struct{ error }
type G2NotInitializedError struct{ error }
type G2RetryTimeoutExceededError struct{ error }
type G2UnhandledError struct{ error }
type G2UnknownDatasourceError struct{ error }

// ----------------------------------------------------------------------------
// Constants
// ----------------------------------------------------------------------------

const (
	G2Base G2ErrorTypeIds = iota
	G2BadInput
	G2Configuration
	G2Database
	G2DatabaseConnectionLost
	G2License
	G2NotFound
	G2NotInitialized
	G2Retryable
	G2RetryTimeoutExceeded
	G2Unhandled
	G2UnknownDatasource
	G2Unrecoverable
)

// ----------------------------------------------------------------------------
// Variables
// ----------------------------------------------------------------------------

// Message templates for g2engine implementations.
// Note: The lists of G2ErrorTypeIds are from innermost error to outer most error.
// Example:  #10 is G2RetryableError{G2RetryTimeoutExceededError{errors.New(message)}}
var G2ErrorTypes = map[int][]G2ErrorTypeIds{
"""  # noqa: E101, W191

TEST_FUNCTION_TEMPLATE = f"""
	ctx := context.TODO()
	jsonString := `{{json}}`
	result, err := Unmarshal{{struct}}(ctx, jsonString)
	testError(test, ctx, err)
	printActual(test, result)
"""  # noqa: E101,F541,W191

OUTPUT_FOOTER = """
}

// A list of all G2ErrorTypeIds.
var AllG2ErrorTypes = []G2ErrorTypeIds{
	G2BadInput,
	G2Base,
	G2Configuration,
	G2Database,
	G2DatabaseConnectionLost,
	G2License,
	G2NotFound,
	G2NotInitialized,
	G2Retryable,
	G2RetryTimeoutExceeded,
	G2Unhandled,
	G2UnknownDatasource,
	G2Unrecoverable,
}
"""  # noqa: E101,F541,W191


with open(INPUT_FILE, encoding="utf-8") as input_file:
    errors = json.load(input_file)

with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
    file.write(OUTPUT_HEADER)
    for error_number, error_data in errors.items():
        output_line = ""
        error_class = error_data.get("class")
        if error_class:
            class_variable = error_class.removesuffix("Error")
            match class_variable:
                case "G2":
                    class_variable = "G2Base"
                case "G2NotFound":
                    class_variable = "G2NotFound, G2BadInput"
                case "G2UnknownDatasource":
                    class_variable = "G2UnknownDatasource, G2BadInput"
                case "G2DatabaseConnectionLost":
                    class_variable = "G2DatabaseConnectionLost, G2Retryable"
                case "G2RetryTimeoutExceeded":
                    class_variable = "G2RetryTimeoutExceeded, G2Retryable"
                case "G2Database":
                    class_variable = "G2Database, G2Unrecoverable"
                case "G2License":
                    class_variable = "G2License, G2Unrecoverable"
                case "G2NotInitialized":
                    class_variable = "G2NotInitialized, G2Unrecoverable"
                case "G2Unhandled":
                    class_variable = "G2Unhandled, G2Unrecoverable"
            output_line = f"{error_number}: {{{class_variable}}},"
            error_name = error_data.get("name")
            error_comment = error_data.get("comment")
            if error_name or error_comment:
                output_line += f" // {error_name} - {error_comment}"
        if len(output_line) > 0:
            output_line += "\n"
            file.write(output_line)
    file.write(OUTPUT_FOOTER)

# Epilog.

logging.info("{0}".format("-" * 80))
logging.info("--- {0} - End".format(os.path.basename(__file__)))
logging.info("{0}".format("-" * 80))
